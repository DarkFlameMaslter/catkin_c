// Generated by gencpp from file communication_demo/key.msg
// DO NOT EDIT!


#ifndef COMMUNICATION_DEMO_MESSAGE_KEY_H
#define COMMUNICATION_DEMO_MESSAGE_KEY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace communication_demo
{
template <class ContainerAllocator>
struct key_
{
  typedef key_<ContainerAllocator> Type;

  key_()
    : key(0)  {
    }
  key_(const ContainerAllocator& _alloc)
    : key(0)  {
  (void)_alloc;
    }



   typedef int32_t _key_type;
  _key_type key;





  typedef boost::shared_ptr< ::communication_demo::key_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::communication_demo::key_<ContainerAllocator> const> ConstPtr;

}; // struct key_

typedef ::communication_demo::key_<std::allocator<void> > key;

typedef boost::shared_ptr< ::communication_demo::key > keyPtr;
typedef boost::shared_ptr< ::communication_demo::key const> keyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::communication_demo::key_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::communication_demo::key_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::communication_demo::key_<ContainerAllocator1> & lhs, const ::communication_demo::key_<ContainerAllocator2> & rhs)
{
  return lhs.key == rhs.key;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::communication_demo::key_<ContainerAllocator1> & lhs, const ::communication_demo::key_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace communication_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::communication_demo::key_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication_demo::key_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication_demo::key_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication_demo::key_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication_demo::key_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication_demo::key_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::communication_demo::key_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5f7d6b16cb4e9d7a81b607f04247968";
  }

  static const char* value(const ::communication_demo::key_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5f7d6b16cb4e9d7ULL;
  static const uint64_t static_value2 = 0xa81b607f04247968ULL;
};

template<class ContainerAllocator>
struct DataType< ::communication_demo::key_<ContainerAllocator> >
{
  static const char* value()
  {
    return "communication_demo/key";
  }

  static const char* value(const ::communication_demo::key_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::communication_demo::key_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 key\n"
;
  }

  static const char* value(const ::communication_demo::key_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::communication_demo::key_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct key_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::communication_demo::key_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::communication_demo::key_<ContainerAllocator>& v)
  {
    s << indent << "key: ";
    Printer<int32_t>::stream(s, indent + "  ", v.key);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMUNICATION_DEMO_MESSAGE_KEY_H
