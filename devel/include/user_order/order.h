// Generated by gencpp from file user_order/order.msg
// DO NOT EDIT!


#ifndef USER_ORDER_MESSAGE_ORDER_H
#define USER_ORDER_MESSAGE_ORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace user_order
{
template <class ContainerAllocator>
struct order_
{
  typedef order_<ContainerAllocator> Type;

  order_()
    : target_coordinate_x(0)
    , target_coordinate_y(0)  {
    }
  order_(const ContainerAllocator& _alloc)
    : target_coordinate_x(0)
    , target_coordinate_y(0)  {
  (void)_alloc;
    }



   typedef int32_t _target_coordinate_x_type;
  _target_coordinate_x_type target_coordinate_x;

   typedef int32_t _target_coordinate_y_type;
  _target_coordinate_y_type target_coordinate_y;





  typedef boost::shared_ptr< ::user_order::order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_order::order_<ContainerAllocator> const> ConstPtr;

}; // struct order_

typedef ::user_order::order_<std::allocator<void> > order;

typedef boost::shared_ptr< ::user_order::order > orderPtr;
typedef boost::shared_ptr< ::user_order::order const> orderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_order::order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_order::order_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_order::order_<ContainerAllocator1> & lhs, const ::user_order::order_<ContainerAllocator2> & rhs)
{
  return lhs.target_coordinate_x == rhs.target_coordinate_x &&
    lhs.target_coordinate_y == rhs.target_coordinate_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_order::order_<ContainerAllocator1> & lhs, const ::user_order::order_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_order

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_order::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_order::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_order::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_order::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_order::order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_order::order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_order::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c85ee4726e19a286fd142a1dc905754d";
  }

  static const char* value(const ::user_order::order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc85ee4726e19a286ULL;
  static const uint64_t static_value2 = 0xfd142a1dc905754dULL;
};

template<class ContainerAllocator>
struct DataType< ::user_order::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_order/order";
  }

  static const char* value(const ::user_order::order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_order::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 target_coordinate_x\n"
"int32 target_coordinate_y\n"
;
  }

  static const char* value(const ::user_order::order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_order::order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_coordinate_x);
      stream.next(m.target_coordinate_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_order::order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_order::order_<ContainerAllocator>& v)
  {
    s << indent << "target_coordinate_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_coordinate_x);
    s << indent << "target_coordinate_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_coordinate_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_ORDER_MESSAGE_ORDER_H
